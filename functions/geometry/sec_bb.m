function bounding_boxes = sec_bb(sec, alignment, axis_aligned_tiles)
%SEC_BB Returns an array of bounding boxes for a section after the specified alignment.
% Usage:
%   bounding_boxes = sec_bb(sec)
%   bounding_boxes = sec_bb(sec, alignment)
%   bounding_boxes = sec_bb(sec, alignment_struct)
%   bounding_boxes = sec_bb(sec, tforms)
%   bounding_boxes = sec_bb(sec, alignment, true)
%
% Args:
%   sec is a structure generated by load_sec.
%   alignment: a string specifying the alignment to use, or an alignment
%       structure with a tforms field.
%       Defaults to the last alignment added to sec.alignments, or a grid 
%       if only the initial alignment is available in the section.
%   axis_aligned_tiles: if true, returns the axis-aligned bounding boxes of
%       the transformed tiles. Defaults to false.
%
% Returns:
%   bounding_boxes a cell array of the bounding boxes of each tile.
%
% Notes:
%   - This is just a transform the initial tile vertices.
%   - When using axis_aligned_tiles, the output is NOT the same as the
%       bounding boxes of the transformed tile images. This is because
%       imwarp nudges the images slightly to maintain the original
%       resolution. See tform_bb2bb.
%
% See also: ref_bb, tform_bb2bb, sz2bb, plot_regions, plot_section

% Default alignment
alignments = fieldnames(sec.alignments);
if nargin < 2
    alignment = get_grid_alignment(sec); % grid
    if ~isempty(alignments) && strcmp(alignments{end}, 'initial')
        alignment = sec.alignments.(alignments{end}); % last alignment
    end
end

% Validate and get alignment transforms
alignment = validatealignment(alignment, sec);
tforms = alignment.tforms;

if nargin < 3; axis_aligned_tiles = false; end

% Calculate bounding boxes
bounding_boxes = cell(sec.num_tiles, 1);
for i = 1:sec.num_tiles
    % Get an initial bounding box based on the tile size
    bb = sz2bb(sec.tile_sizes{i});
    
    % Apply alignment transform
    bb = tforms{i}.transformPointsForward(bb);
    
    if axis_aligned_tiles
        % Convert transformed bounding box to an axis-aligned bounding box
        bb = minaabb(bb);
    end
    
    % Save to array
    bounding_boxes{i} = bb;
end
end

